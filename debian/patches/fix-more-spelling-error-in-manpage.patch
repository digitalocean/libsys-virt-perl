Description: Fix spelling errors in various manpages
Origin: vendor
Bug: https://rt.cpan.org/Ticket/Display.html?id=113875
Forwarded: https://rt.cpan.org/Ticket/Display.html?id=113875
Author: Salvatore Bonaccorso <carnil@debian.org>
Last-Update: 2016-07-01

--- a/lib/Sys/Virt.pm
+++ b/lib/Sys/Virt.pm
@@ -1386,7 +1386,7 @@ can be extracted using the C<unpack> met
 
 Returns a hash reference providing information about the host
 CPU statistics. If <$cpuNum> is omitted, it defaults to C<Sys::Virt::NODE_CPU_STATS_ALL_CPUS>
-which causes it to return cummulative information for all
+which causes it to return cumulative information for all
 CPUs in the host. If C<$cpuNum> is zero or larger, it returns
 information just for the specified number. The C<$flags>
 parameter is currently unused and defaults to zero. The
@@ -1420,7 +1420,7 @@ The overall percentage utilization.
 
 Returns a hash reference providing information about the host
 memory statistics. If <$cellNum> is omitted, it defaults to C<Sys::Virt::NODE_MEMORY_STATS_ALL_CELLS>
-which causes it to return cummulative information for all
+which causes it to return cumulative information for all
 NUMA cells in the host. If C<$cellNum> is zero or larger, it
 returns information just for the specified number. The C<$flags>
 parameter is currently unused and defaults to zero. The
--- a/lib/Sys/Virt/Domain.pm
+++ b/lib/Sys/Virt/Domain.pm
@@ -1333,7 +1333,7 @@ Obtain information about the state of al
 guest domain. The returned list will have one element for each vCPU,
 where each elements contains a hash reference. The keys in the hash
 are, C<number> the vCPU number, C<cpu> the physical CPU on which the
-vCPU is currently scheduled, C<cpuTime> the cummulative execution
+vCPU is currently scheduled, C<cpuTime> the cumulative execution
 time of the vCPU, C<state> the running state and C<affinity> giving
 the allowed shedular placement. The value for C<affinity> is a
 string representing a bitmask against physical CPUs, 8 cpus per
@@ -1395,7 +1395,7 @@ documented later, and defaults to 0 if o
 =item my @stats = $dom->get_cpu_stats($startCpu, $numCpus, $flags=0)
 
 Requests the guests host physical CPU usage statistics, starting
-from host CPU <$startCpu> counting upto C<$numCpus>. If C<$startCpu>
+from host CPU <$startCpu> counting up to C<$numCpus>. If C<$startCpu>
 is -1 and C<$numCpus> is 1, then the utilization across all CPUs
 is returned. Returns an array of hash references, each element
 containing stats for one CPU.
@@ -1491,7 +1491,7 @@ The elapsed time in milliseconds
 
 =item Sys::Virt::Domain::JOB_TIME_ELAPSED_NET
 
-Time in miliseconds since the beginning of the migration job NOT
+Time in milliseconds since the beginning of the migration job NOT
 including the time required to transfer control flow from the
 source host to the destination host.
 
--- a/lib/Sys/Virt/StoragePool.pm
+++ b/lib/Sys/Virt/StoragePool.pm
@@ -437,7 +437,7 @@ Include disk storage pools
 
 =item Sys::Virt::StoragePool::LIST_FS
 
-Include filesytem storage pools
+Include filesystem storage pools
 
 =item Sys::Virt::StoragePool::LIST_ISCSI
 
--- a/lib/Sys/Virt/Stream.pm
+++ b/lib/Sys/Virt/Stream.pm
@@ -71,13 +71,13 @@ be called on any stream which has been a
 
 =item $rv = $st->recv($data, $nbytes)
 
-Receive upto C<$nbytes> worth of data, copying into C<$data>.
+Receive up to C<$nbytes> worth of data, copying into C<$data>.
 Returns the number of bytes read, or -2 if I/O would block,
 or -1 on error.
 
 =item $rv = $st->send($data, $nbytes)
 
-Send upto C<$nbytes> worth of data, copying from C<$data>.
+Send up to C<$nbytes> worth of data, copying from C<$data>.
 Returns the number of bytes sent, or -2 if I/O would block,
 or -1 on error.
 
